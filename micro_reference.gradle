import com.android.manifmerger.ManifestMerger2
import com.android.manifmerger.MergingReport
import com.android.manifmerger.XmlDocument
import com.android.utils.ILogger

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.android.tools.build:manifest-merger:25.3.0"
    }
}

def aidlSrcDirs = []
def assetsSrcDirs = []
def javaSrcDirs = []
def jniSrcDirs = []
def jniLibsSrcDirs = []
def manifestSrcFiles = []
def resSrcDirs = []

def logger = new ILogger() {
    @Override
    void error(Throwable t, String msgFormat, Object... args) {

    }

    @Override
    void warning(String msgFormat, Object... args) {

    }

    @Override
    void info(String msgFormat, Object... args) {

    }

    @Override
    void verbose(String msgFormat, Object... args) {

    }
};

def addLibrary
addLibrary = { libraryPath ->
    // check [micro.properties] exists or not
    File libraryPropertiesFile = new File(libraryPath + '/micro.properties');
    if (!libraryPropertiesFile.exists()) return

    def libraryName = file(libraryPath).name

    // read micro module properties
    def libraryProperties = new Properties()
    libraryPropertiesFile.withInputStream { libraryProperties.load(it) }
    libraryProperties = new ConfigSlurper().parse(libraryProperties)

    // check library reference
    libraryProperties.android.library.reference.each {
        File childLibrary = new File("$projectDir" + it.value);
        println '======childLibrary: ' + childLibrary.absolutePath
        if (childLibrary.exists()) {
            addLibrary(childLibrary.absolutePath)
        } else {
            logger.error(libraryName + "[library]: android.library.reference [" + childLibrary.absolutePath + "] is not exists.")
        }
    }

    // add aidl.srcDir
    def aidlSrcDir = libraryProperties.getProperty('aidl.srcDir')
    if (aidlSrcDir.size() == 0) {
        aidlSrcDir = libraryName + "/src/main/aidl";
    }
    aidlSrcDir = aidlSrcDir.toString()
    if (!aidlSrcDirs.contains(aidlSrcDir)) {
        aidlSrcDirs << aidlSrcDir
    }

    // add assets.srcDir
    def assetsSrcDir = libraryProperties.getProperty('assets.srcDir')
    if (assetsSrcDir.size() == 0) {
        assetsSrcDir = libraryName + "/src/main/assets";
    }
    assetsSrcDir = assetsSrcDir.toString()
    if (!assetsSrcDirs.contains(assetsSrcDir)) {
        assetsSrcDirs << assetsSrcDir
    }

    // add jni.srcDir
    def jniSrcDir = libraryProperties.getProperty('jni.srcDir')
    if (jniSrcDir.size() == 0) {
        jniSrcDir = libraryName + "/src/main/jni";
    }
    jniSrcDir = jniSrcDir.toString()
    if (!jniSrcDirs.contains(jniSrcDir)) {
        jniSrcDirs << jniSrcDir
    }

    // add jniLibs.srcDir
    def jniLibsSrcDir = libraryProperties.getProperty('jniLibs.srcDir')
    if (jniLibsSrcDir.size() == 0) {
        jniLibsSrcDir = libraryName + "/src/main/jniLibs";
    }
    jniLibsSrcDir = jniLibsSrcDir.toString()
    if (!jniLibsSrcDirs.contains(jniLibsSrcDir)) {
        jniLibsSrcDirs << jniLibsSrcDir
    }

    // add java.srcDir
    def javaSrcDir = libraryProperties.getProperty('java.srcDir')
    if (javaSrcDir.size() == 0) {
        javaSrcDir = libraryName + "/src/main/java";
    }
    javaSrcDir = javaSrcDir.toString()
    if (!javaSrcDirs.contains(javaSrcDir)) {
        javaSrcDirs << javaSrcDir
        println '======javaSrcDir: ' + javaSrcDir
    }

    // add res.srcDir
    def resSrcDir = libraryProperties.getProperty('res.srcDir')
    if (resSrcDir.size() == 0) {
        resSrcDir = libraryName + "/src/main/res";
    }
    resSrcDir = resSrcDir.toString()
    if (!resSrcDirs.contains(resSrcDir)) {
        resSrcDirs << resSrcDir
    }

    // add manifest.srcFile
    def manifestSrcFile = libraryProperties.getProperty('manifest.srcFile')
    if (manifestSrcFile.size() == 0) {
        manifestSrcFile = libraryName + "/src/AndroidManifest.xml";
    }
    manifestSrcFile = manifestSrcFile.toString()
    if (!manifestSrcFiles.contains(manifestSrcFile)) {
        manifestSrcFiles << manifestSrcFile
    }
}

def microModuleHandler = { ->

    File moduleDir = new File("$projectDir");
    String[] microModuleDirs = moduleDir.list();
    if (!microModuleDirs.toString().contains('main')) {
        throw new GradleException('without micro-module with name \'main\'')
    }

    def mainLibrary = "$projectDir/main";
    addLibrary(mainLibrary)

    println '======manifestSrcFiles: ' + manifestSrcFiles
    File mainManifestFile = new File("$projectDir/" + manifestSrcFiles[manifestSrcFiles.size() - 1]);

    ManifestMerger2.MergeType mergeType = ManifestMerger2.MergeType.APPLICATION
    XmlDocument.Type documentType = XmlDocument.Type.MAIN;
    ManifestMerger2.Invoker invoker = new ManifestMerger2.Invoker(mainManifestFile, logger, mergeType, documentType);
    for (int i = 0; i < manifestSrcFiles.size() - 1; i++) {
        File microManifestFile = new File("$projectDir/" + manifestSrcFiles[i]);
        if (microManifestFile.exists()) {
            invoker.addLibraryManifest(microManifestFile)
        }
    }
    def mergingReport = invoker.merge()
    def moduleAndroidManifest = mergingReport.getMergedDocument(MergingReport.MergedManifestKind.MERGED)

    new File("$buildDir").mkdirs()
    def file = new File("$buildDir/AndroidManifest.xml")
    file.createNewFile()
    file.write(moduleAndroidManifest)

//    android.sourceSets.main.aidl.srcDirs = aidlSrcDirs
//    android.sourceSets.main.assets.srcDirs = assetsSrcDirs
//    android.sourceSets.main.java.srcDirs = javaSrcDirs
//    android.sourceSets.main.jni.srcDirs = jniSrcDirs
//    android.sourceSets.main.jniLibs.srcDirs = jniLibsSrcDirs
//    android.sourceSets.main.res.srcDirs = resSrcDirs
    android.sourceSets.main.manifest.srcFile "$buildDir/AndroidManifest.xml"
}

task microModuleTask {
    microModuleHandler()
}

preBuild.doFirst {
    microModuleHandler()
}